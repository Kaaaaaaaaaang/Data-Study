1. UNION

'테이블명1'과 '테이블명2'에 대한 각 SELECT 구문에서 위치별로 각기 대응하는 필드('필드명1', '필드명2', ...)를 검색해 중복 없는 합집합을 만든다.
'테이블명1'의 '필드명1'은 '테이블명2'의 '필드명1'에 대응하고, '테이블명1'의 '필드명2'는 '테이블명2'의 '필드명2'에 대응한다.

구문 : SELECT 필드명1, 필드명2, ... , 필드명n
	  FROM 테이블명1
	  UNION
	  SELECT 필드명1, 필드명2, ... , 필드명n
	  FROM 테이블명2;

2. UNION ALL

'테이블명1'과 '테이블명2'에 대한 각 SELECT 구문에서 위치별로 각기 대응하는 필드('필드명1', '필드명2', ...)를 검색해 중복을 허용하는 합집합을 만든다.
중복을 허용하므로 검색하는 데이터 개수는 '테이블명1'과 '테이블명2'의 레코드 합과 같다.

구문 : SELECT 필드명1, 필드명2, ... , 필드명n
	  FROM 테이블명1
	  UNION ALL
	  SELECT 필드명1, 필드명2, ... , 필드명n
	  FROM 테이블명2;

3. INTERSECT

'테이블명1'과 '테이블명2'에 대한 각 SELECT 구문에서 위치별로 각기 대응하는 필드('필드명1', '필드명2', ...)를 검색해 교집합을 만든다.
교집합이므로 '테이블명1'과 '테이블명2'에 모두 속한 데이터를 보인다.

구문 : SELECT 필드명1, 필드명2, ... , 필드명n
	  FROM 테이블명1
	  INTERSECT
	  SELECT 필드명1, 필드명2, ... , 필드명n
	  FROM 테이블명2;

4. MINUS

'테이블명1'과 '테이블명2'에 대한 각 SELECT 구문에서 위치별로 각기 대응하는 필드('필드명1', '필드명2', ...)를 검색해 차집합을 만든다.
'테이블명1'의 필드가 '테이블명2'의 필드와 같으면 제외하고 검색한다. 즉, '테이블명1'에 유일하게 있는 데이터를 보인다.

구문 : SELECT 필드명1, 필드명2, ... , 필드명n
	  FROM 테이블명1
	  MINUS
	  SELECT 필드명1, 필드명2, ... , 필드명n
	  FROM 테이블명2;

